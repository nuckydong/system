<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gopher.system.dao.mysql.CommodityDAO">
	<resultMap id="commodityMap"
		type="com.gopher.system.model.Commodity">
		<result property="id" column="id" javaType="java.lang.Integer"
			jdbcType="INTEGER" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="createUser" column="create_user"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="updateUser" column="update_user"
			javaType="java.lang.Integer" jdbcType="INTEGER" />

		<result property="name" column="name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="commodityTypeId" column="commodity_type_id"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="price" column="price"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="level" column="level"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
	</resultMap>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id"
		parameterType="com.gopher.system.model.Commodity">
		INSERT INTO commodity
		(name,commodity_type_id,price,unit,level,create_user,update_user,create_time,update_time)
		VALUES
		(#{name},#{commodityTypeId},#{price},#{unit},#{level},#{createUser},#{updateUser},now(),now())
	</insert>

	<update id="update"
		parameterType="com.gopher.system.model.Commodity">
		UPDATE commodity
		<set>
			name = #{name},
			commodity_type_id = #{commodityTypeId},
			price =
			#{price},
			update_user = #{updateUser},
			unit = #{unit},
			level = #{level},
			update_time = now()
		</set>
		WHERE id = #{id}
	</update>

	<select id="findOne"
		parameterType="com.gopher.system.model.Commodity"
		resultMap="commodityMap">
		SELECT * FROM commodity
		<where>
			<choose>
				<when test="id > 0 ">
					id = #{id}
				</when>
				<otherwise>
					<if test="name != null and name != '' and level > 0">
						name = #{name}
						AND
						level = #{level}
					</if>
				</otherwise>

			</choose>

		</where>
	</select>

	<select id="findList2"
		parameterType="com.gopher.system.model.Commodity"
		resultMap="commodityMap">
		SELECT * FROM commodity
		<where>
			<if test="name != null and name != '' ">
				name = #{name}
			</if>
			<if test="level > 0">
				AND level = #{level}
			</if>
		</where>
		ORDER BY create_time DESC
	</select>

	<select id="findList"
		parameterType="com.gopher.system.model.Commodity"
		resultMap="commodityMap">
		SELECT * FROM commodity
		<where>
			<if test="name != null and name != '' ">
				name LIKE CONCAT('%',#{name},'%')
			</if>
			<if test="commodityTypeId > 0 ">
				AND commodity_type_id = #{commodityTypeId}
			</if>
			<if test="level > 0">
				AND level = #{level}
			</if>
		</where>
		ORDER BY create_time DESC
	</select>

	<select id="getPage"
		parameterType="com.gopher.system.model.vo.request.CommodityPageRequst"
		resultMap="commodityMap">
		SELECT * FROM commodity
		<where>
			<if test="name != null and name != '' ">
				name LIKE CONCAT('%',#{name},'%')
			</if>
			<if test="commodityTypeId > 0 ">
				AND commodity_type_id = #{commodityTypeId}
			</if>
			<if test="level > 0">
				AND level = #{level}
			</if>
		</where>
		ORDER BY create_time DESC
		limit #{beginIndex},#{pageSize}
	</select>

	<select id="count"
		parameterType="com.gopher.system.model.vo.request.CommodityPageRequst"
		resultType="java.lang.Integer">
		SELECT COUNT(id) FROM commodity
		<where>
			<if test="name != null and name != '' ">
				name LIKE CONCAT('%',#{name},'%')
			</if>
			<if test="level > 0">
				AND level = #{level}
			</if>
			<if test="commodityTypeId > 0 ">
				AND commodity_type_id = #{commodityTypeId}
			</if>
		</where>
	</select>

	<delete id="delete"
		parameterType="com.gopher.system.model.Commodity">
		DELETE FROM commodity WHERE id =#{id}
	</delete>

</mapper>